struct LightInfo
{
	vec4 position;
	vec4 color;
};

struct LightInfoBig
{
	vec4 position;
	vec4 color;
	vec4 constants;
};

layout(std140) uniform BlockLighting
{
	LightInfo lightBuffer[60];
};

vec3 DirectedLight(vec3 lightDirection, vec3 lightColor, vec3 fragNormal, vec3 viewDirection)
{
	vec3 lightDir  = -lightDirection;
	float diffuse  = max(dot(fragNormal, lightDir), 0.0);
	vec3 reflected = reflect(-lightDir, fragNormal);
	float specular = pow(max(dot(viewDirection, reflected), 0.0), 128);
	return lightColor * (specular + diffuse);
}

vec3 PointLight(vec3 lightPos, vec3 lightColor, vec3 fragNormal, vec3 fragPos, vec3 viewDirection)
{
	vec3 lightDir  = normalize(lightPos - fragPos);
	float distance = length(lightPos - fragPos);
	float diffuse  = max(dot(fragNormal, lightDir), 0.0);
	vec3 reflected = reflect(-lightDir, fragNormal);
	float specular = pow(max(dot(viewDirection, reflected), 0.0), 128); 

	// Hacky but passable thing
	float fallOff = 1.0 / (1.0 + (1.0 / 30.0) * distance + 0.002 * distance * distance); 
	return lightColor * (specular + diffuse) * fallOff;
}

vec3 PointLightConstants(vec3 lightPos, vec3 lightColor, vec3 lightConstants, vec3 fragNormal, vec3 fragPos, vec3 viewDirection)
{
	vec3 lightDir  = normalize(lightPos - fragPos);
	float distance = length(lightPos - fragPos);
	float diffuse  = max(dot(fragNormal, lightDir), 0.0);
	vec3 reflected = reflect(-lightDir, fragNormal);
	float specular = pow(max(dot(viewDirection, reflected), 0.0), 128); 

	// Hacky but passable thing
	float fallOff = 1.0 / (lightConstants.x + lightConstants.y * distance + lightConstants.z * distance * distance); 
	return lightColor * (specular + diffuse) * fallOff;
}

vec3 PointLightStruct(LightInfoBig inputs, vec3 fragNormal, vec3 fragPos, vec3 viewDirection)
{
	return PointLightConstants(inputs.position.xyz, inputs.color.xyz, inputs.constants.xyz, fragNormal, fragPos, viewDirection);
}

vec3 DirectedPointLight(vec3 lightPos, vec3 lightDirection, vec3 lightColor, vec3 fragNormal, vec3 fragPos, vec3 viewDirection)
{
	vec3 lightDir  = normalize(lightPos - fragPos);
	float distance = length(lightPos - fragPos);
	float diffuse  = max(dot(fragNormal, lightDir), 0.0);
	vec3 reflected = reflect(-lightDir, fragNormal);
	float specular = pow(max(dot(viewDirection, reflected), 0.0), 1000); // TODO: Specular setting
	
	// Check how aligned the "primary" direction of the light is, with the light hitting this fragment
	float directed = abs(max(dot(lightDir, lightDirection), 0));
		
	float constant = cos(radians(25));
	// If the alignment is less than 25 degrees(arbitrary constant), the light has no effect
	
	// I don't know which of these I prefer
	float multiplier = step(constant, directed);
	multiplier *= (directed - constant) / ( 1 - constant);
	multiplier = pow(multiplier, 2);
	// Hacky but passable thing
	float fallOff = 1.0 / (1.0 + (1.0 / 50.0) * distance + (1.0 / 10000.f) * distance * distance); 
	//fallOff = 1.0;
	return lightColor * (specular + diffuse) * fallOff * multiplier;
}