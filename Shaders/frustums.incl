struct Plane
{
	vec3 normal;
	float distance;
};

struct Frustum
{
	Plane planes[4];
};


float getDistance(Plane plane, vec3 point)
{
	return dot(point, plane.normal) - plane.distance;
}

Plane MakePlane(vec3 a, vec3 b, vec3 c)
{
	Plane dummy;
	vec3 ba = normalize(b - a);
	vec3 ca = normalize(c - a);
	dummy.normal = normalize(cross(ba, ca));
	dummy.distance = dot(dummy.normal, a);
	return dummy;
}

bool SphereBehindPlane(Plane plane, vec4 sphere)
{
	return getDistance(plane, sphere.xyz) < -sphere.w;
}

// Does the frustum contain the sphere?
bool FrustumSphere(Frustum frustum, vec4 sphere)
{
	bool result = true;
	// Far/near culling
	for (int i = 0; i < 4 && result; i++)
	{
		if (SphereBehindPlane(frustum.planes[i], sphere))
		{
			result = false;
		}
	}
	return result;
}

layout(std430, binding = 5) volatile buffer Frustums
{
	Frustum frustums[];
};